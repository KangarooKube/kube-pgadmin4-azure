# Build pgAdmin4 on UBI10 and include PostgreSQL client binaries and MSAL library
# Usage:
#  docker build --build-arg MSAL_PIP_VERSION=1.33.0 --build-arg PGADMIN_PIP_VERSION=6.18 -t kube-pgadmin4-azure:ubi10 .

ARG PGADMIN_PIP_VERSION=9.8
ARG MSAL_PIP_VERSION=1.33.0

# Use specific Postgres client versions as needed
# env & app builder steps are intentionally simple here since we will pip-install pgadmin in final image
# Final runtime image based on UBI10
FROM registry.access.redhat.com/ubi10/ubi:10.0 AS pgadmin-ubi10
ARG PGADMIN_PIP_VERSION
ARG MSAL_PIP_VERSION

USER root
# Install runtime deps consistent with dpage image: python, libs, tools, sqlite, sudo, etc.
RUN dnf -y update && \
    dnf -y upgrade && \
    dnf -y install --assumeyes --allowerasing \
      python3 python3-pip python3-devel \
      libffi-devel openssl-devel \
      ca-certificates which wget unzip \
      sqlite sqlite-devel curl \
      procps shadow-utils sudo bash && \
    dnf -y install --assumeyes --nogpgcheck https://download.postgresql.org/pub/repos/yum/reporpms/EL-10-x86_64/pgdg-redhat-repo-latest.noarch.rpm && \
    # dnf -y module disable postgresql --assumeyes && \
    dnf -y update && \
    dnf -y install --assumeyes \
      postgresql13 postgresql13-contrib \
      postgresql14 postgresql14-contrib \
      postgresql15 postgresql15-contrib \
      postgresql16 postgresql16-contrib \
      postgresql17 postgresql17-contrib && \
    dnf clean all && \
    dnf makecache
    #alternatives --install /usr/bin/python3 python3 /usr/bin/python3.12 10 || true && \
    #alternatives --set python3 /usr/bin/python3.12 || true && \
RUN python3 -m ensurepip --default-pip --upgrade || true && \
    python3 -m pip install --upgrade pip setuptools wheel


# Ensure pip tools
RUN which psql && \
    psql --version && \
    which pip3 && \
    pip3 --version && \
    which python3 && \
    python3 --version && \
    python3 -m pip --version

# Install pgAdmin4 from pip (allow version pin via build-arg)
RUN /bin/sh -c 'python3 -m pip install "pgadmin4${PGADMIN_PIP_VERSION:+==${PGADMIN_PIP_VERSION}}"' && \
    /bin/sh -c 'python3 -m pip install "msal${MSAL_PIP_VERSION:+==${MSAL_PIP_VERSION}}"'

# Create directories and user similar to upstream image
RUN useradd -u 5050 -m -d /var/lib/pgadmin -s /sbin/nologin pgadmin || true && \
    mkdir -p /var/lib/pgadmin /var/log/pgadmin /var/lib/pgadmin/sessions /var/lib/pgadmin/storage /usr/local/pgsql && \
    chown -R pgadmin:pgadmin /var/lib/pgadmin /var/log/pgadmin /var/lib/pgadmin/sessions /var/lib/pgadmin/storage

# --- Copy PG client binaries from postgres builder stages ---
# create per-version dirs and copy main client binaries (psql, pg_dump, pg_dumpall, pg_restore where present)
# NOTE: paths in official postgres images may vary; copying common locations used by upstream Dockerfile
RUN mkdir -p /usr/local/pgsql/pgsql-12 /usr/local/pgsql/pgsql-13 /usr/local/pgsql/pgsql-14 /usr/local/pgsql/pgsql-15 /usr/local/pgsql/pgsql-16 /usr/local/pgsql/pgsql-17

# Create per-version symlinks for psql and tools
RUN mkdir -p /usr/local/pgsql && \
    for v in 14 15 16 17; do \
      if [ -x "/usr/pgsql-$v/bin/psql" ]; then \
        mkdir -p /usr/local/pgsql/pgsql-$v; \
        ln -sf "/usr/pgsql-$v/bin/psql" /usr/local/bin/psql-$v; \
        ln -sf "/usr/pgsql-$v/bin/pg_dump" /usr/local/bin/pg_dump-$v || true; \
        ln -sf "/usr/pgsql-$v/bin/pg_restore" /usr/local/bin/pg_restore-$v || true; \
      fi; \
    done && \
    # default psql -> newest available
    if [ -f /usr/local/bin/psql-17 ]; then ln -sf /usr/local/bin/psql-17 /usr/local/bin/psql; \
    elif [ -f /usr/local/bin/psql-16 ]; then ln -sf /usr/local/bin/psql-16 /usr/local/bin/psql; fi

# Expose ports and set workdir
EXPOSE 80 443
WORKDIR /var/lib/pgadmin

ENV PGADMIN_CONFIG_ENHANCED_COOKIE_PROTECTION=True \
    PGADMIN_CONFIG_SERVER_MODE=True

# switch to pgadmin user for runtime
USER pgadmin

# default entry (pip package exposes module)
CMD ["python3", "-m", "pgadmin4"]